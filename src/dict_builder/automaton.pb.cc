// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automaton.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "automaton.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoNode_Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNode_Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAutomaton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAutomaton_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_automaton_2eproto() {
  protobuf_AddDesc_automaton_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "automaton.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoNode_descriptor_ = file->message_type(0);
  static const int ProtoNode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, rev_edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, rev_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, len_actual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, len_within_document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, docs_occurs_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, score_occurs_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, last_hash_),
  };
  ProtoNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNode_descriptor_,
      ProtoNode::default_instance_,
      ProtoNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNode));
  ProtoNode_Edge_descriptor_ = ProtoNode_descriptor_->nested_type(0);
  static const int ProtoNode_Edge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode_Edge, edge_char_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode_Edge, to_node_id_),
  };
  ProtoNode_Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNode_Edge_descriptor_,
      ProtoNode_Edge::default_instance_,
      ProtoNode_Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode_Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNode_Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNode_Edge));
  ProtoAutomaton_descriptor_ = file->message_type(1);
  static const int ProtoAutomaton_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, nodes_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, last_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, len_up_to_stop_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, current_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, is_free_node_),
  };
  ProtoAutomaton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAutomaton_descriptor_,
      ProtoAutomaton::default_instance_,
      ProtoAutomaton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAutomaton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAutomaton));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_automaton_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNode_descriptor_, &ProtoNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNode_Edge_descriptor_, &ProtoNode_Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAutomaton_descriptor_, &ProtoAutomaton::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_automaton_2eproto() {
  delete ProtoNode::default_instance_;
  delete ProtoNode_reflection_;
  delete ProtoNode_Edge::default_instance_;
  delete ProtoNode_Edge_reflection_;
  delete ProtoAutomaton::default_instance_;
  delete ProtoAutomaton_reflection_;
}

void protobuf_AddDesc_automaton_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017automaton.proto\"\226\002\n\tProtoNode\022\036\n\005edges"
    "\030\001 \003(\0132\017.ProtoNode.Edge\022\"\n\trev_edges\030\002 \003"
    "(\0132\017.ProtoNode.Edge\022\021\n\trev_links\030\010 \003(\003\022\014"
    "\n\004link\030\003 \002(\003\022\022\n\nlen_actual\030\004 \002(\003\022\033\n\023len_"
    "within_document\030\005 \002(\003\022\026\n\016docs_occurs_in\030"
    "\006 \002(\003\022\031\n\021score_occurs_only\030\007 \002(\001\022\021\n\tlast"
    "_hash\030\t \002(\003\032-\n\004Edge\022\021\n\tedge_char\030\001 \002(\005\022\022"
    "\n\nto_node_id\030\002 \002(\003\"\216\001\n\016ProtoAutomaton\022\036\n"
    "\nnodes_pool\030\001 \003(\0132\n.ProtoNode\022\021\n\tlast_no"
    "de\030\002 \002(\003\022\035\n\025len_up_to_stop_symbol\030\003 \002(\003\022"
    "\024\n\014current_coef\030\004 \002(\001\022\024\n\014is_free_node\030\005 "
    "\003(\010", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "automaton.proto", &protobuf_RegisterTypes);
  ProtoNode::default_instance_ = new ProtoNode();
  ProtoNode_Edge::default_instance_ = new ProtoNode_Edge();
  ProtoAutomaton::default_instance_ = new ProtoAutomaton();
  ProtoNode::default_instance_->InitAsDefaultInstance();
  ProtoNode_Edge::default_instance_->InitAsDefaultInstance();
  ProtoAutomaton::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_automaton_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_automaton_2eproto {
  StaticDescriptorInitializer_automaton_2eproto() {
    protobuf_AddDesc_automaton_2eproto();
  }
} static_descriptor_initializer_automaton_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoNode_Edge::kEdgeCharFieldNumber;
const int ProtoNode_Edge::kToNodeIdFieldNumber;
#endif  // !_MSC_VER

ProtoNode_Edge::ProtoNode_Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNode.Edge)
}

void ProtoNode_Edge::InitAsDefaultInstance() {
}

ProtoNode_Edge::ProtoNode_Edge(const ProtoNode_Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNode.Edge)
}

void ProtoNode_Edge::SharedCtor() {
  _cached_size_ = 0;
  edge_char_ = 0;
  to_node_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNode_Edge::~ProtoNode_Edge() {
  // @@protoc_insertion_point(destructor:ProtoNode.Edge)
  SharedDtor();
}

void ProtoNode_Edge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoNode_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNode_Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNode_Edge_descriptor_;
}

const ProtoNode_Edge& ProtoNode_Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_automaton_2eproto();
  return *default_instance_;
}

ProtoNode_Edge* ProtoNode_Edge::default_instance_ = NULL;

ProtoNode_Edge* ProtoNode_Edge::New() const {
  return new ProtoNode_Edge;
}

void ProtoNode_Edge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoNode_Edge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(to_node_id_, edge_char_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNode_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNode.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 edge_char = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edge_char_)));
          set_has_edge_char();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_node_id;
        break;
      }

      // required int64 to_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_node_id_)));
          set_has_to_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNode.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNode.Edge)
  return false;
#undef DO_
}

void ProtoNode_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNode.Edge)
  // required int32 edge_char = 1;
  if (has_edge_char()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->edge_char(), output);
  }

  // required int64 to_node_id = 2;
  if (has_to_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to_node_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNode.Edge)
}

::google::protobuf::uint8* ProtoNode_Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNode.Edge)
  // required int32 edge_char = 1;
  if (has_edge_char()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->edge_char(), target);
  }

  // required int64 to_node_id = 2;
  if (has_to_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to_node_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNode.Edge)
  return target;
}

int ProtoNode_Edge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 edge_char = 1;
    if (has_edge_char()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edge_char());
    }

    // required int64 to_node_id = 2;
    if (has_to_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_node_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNode_Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNode_Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNode_Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNode_Edge::MergeFrom(const ProtoNode_Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edge_char()) {
      set_edge_char(from.edge_char());
    }
    if (from.has_to_node_id()) {
      set_to_node_id(from.to_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNode_Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNode_Edge::CopyFrom(const ProtoNode_Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNode_Edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProtoNode_Edge::Swap(ProtoNode_Edge* other) {
  if (other != this) {
    std::swap(edge_char_, other->edge_char_);
    std::swap(to_node_id_, other->to_node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNode_Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNode_Edge_descriptor_;
  metadata.reflection = ProtoNode_Edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoNode::kEdgesFieldNumber;
const int ProtoNode::kRevEdgesFieldNumber;
const int ProtoNode::kRevLinksFieldNumber;
const int ProtoNode::kLinkFieldNumber;
const int ProtoNode::kLenActualFieldNumber;
const int ProtoNode::kLenWithinDocumentFieldNumber;
const int ProtoNode::kDocsOccursInFieldNumber;
const int ProtoNode::kScoreOccursOnlyFieldNumber;
const int ProtoNode::kLastHashFieldNumber;
#endif  // !_MSC_VER

ProtoNode::ProtoNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNode)
}

void ProtoNode::InitAsDefaultInstance() {
}

ProtoNode::ProtoNode(const ProtoNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNode)
}

void ProtoNode::SharedCtor() {
  _cached_size_ = 0;
  link_ = GOOGLE_LONGLONG(0);
  len_actual_ = GOOGLE_LONGLONG(0);
  len_within_document_ = GOOGLE_LONGLONG(0);
  docs_occurs_in_ = GOOGLE_LONGLONG(0);
  score_occurs_only_ = 0;
  last_hash_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNode::~ProtoNode() {
  // @@protoc_insertion_point(destructor:ProtoNode)
  SharedDtor();
}

void ProtoNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNode_descriptor_;
}

const ProtoNode& ProtoNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_automaton_2eproto();
  return *default_instance_;
}

ProtoNode* ProtoNode::default_instance_ = NULL;

ProtoNode* ProtoNode::New() const {
  return new ProtoNode;
}

void ProtoNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 248) {
    ZR_(link_, score_occurs_only_);
  }
  last_hash_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  edges_.Clear();
  rev_edges_.Clear();
  rev_links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNode.Edge edges = 1;
      case 1: {
        if (tag == 10) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_edges;
        if (input->ExpectTag(18)) goto parse_rev_edges;
        break;
      }

      // repeated .ProtoNode.Edge rev_edges = 2;
      case 2: {
        if (tag == 18) {
         parse_rev_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rev_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rev_edges;
        if (input->ExpectTag(24)) goto parse_link;
        break;
      }

      // required int64 link = 3;
      case 3: {
        if (tag == 24) {
         parse_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &link_)));
          set_has_link();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len_actual;
        break;
      }

      // required int64 len_actual = 4;
      case 4: {
        if (tag == 32) {
         parse_len_actual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_actual_)));
          set_has_len_actual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len_within_document;
        break;
      }

      // required int64 len_within_document = 5;
      case 5: {
        if (tag == 40) {
         parse_len_within_document:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_within_document_)));
          set_has_len_within_document();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_docs_occurs_in;
        break;
      }

      // required int64 docs_occurs_in = 6;
      case 6: {
        if (tag == 48) {
         parse_docs_occurs_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &docs_occurs_in_)));
          set_has_docs_occurs_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_score_occurs_only;
        break;
      }

      // required double score_occurs_only = 7;
      case 7: {
        if (tag == 57) {
         parse_score_occurs_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_occurs_only_)));
          set_has_score_occurs_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rev_links;
        break;
      }

      // repeated int64 rev_links = 8;
      case 8: {
        if (tag == 64) {
         parse_rev_links:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_rev_links())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rev_links())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rev_links;
        if (input->ExpectTag(72)) goto parse_last_hash;
        break;
      }

      // required int64 last_hash = 9;
      case 9: {
        if (tag == 72) {
         parse_last_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_hash_)));
          set_has_last_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNode)
  return false;
#undef DO_
}

void ProtoNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNode)
  // repeated .ProtoNode.Edge edges = 1;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edges(i), output);
  }

  // repeated .ProtoNode.Edge rev_edges = 2;
  for (int i = 0; i < this->rev_edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rev_edges(i), output);
  }

  // required int64 link = 3;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->link(), output);
  }

  // required int64 len_actual = 4;
  if (has_len_actual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->len_actual(), output);
  }

  // required int64 len_within_document = 5;
  if (has_len_within_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->len_within_document(), output);
  }

  // required int64 docs_occurs_in = 6;
  if (has_docs_occurs_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->docs_occurs_in(), output);
  }

  // required double score_occurs_only = 7;
  if (has_score_occurs_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->score_occurs_only(), output);
  }

  // repeated int64 rev_links = 8;
  for (int i = 0; i < this->rev_links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->rev_links(i), output);
  }

  // required int64 last_hash = 9;
  if (has_last_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->last_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNode)
}

::google::protobuf::uint8* ProtoNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNode)
  // repeated .ProtoNode.Edge edges = 1;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->edges(i), target);
  }

  // repeated .ProtoNode.Edge rev_edges = 2;
  for (int i = 0; i < this->rev_edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rev_edges(i), target);
  }

  // required int64 link = 3;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->link(), target);
  }

  // required int64 len_actual = 4;
  if (has_len_actual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->len_actual(), target);
  }

  // required int64 len_within_document = 5;
  if (has_len_within_document()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->len_within_document(), target);
  }

  // required int64 docs_occurs_in = 6;
  if (has_docs_occurs_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->docs_occurs_in(), target);
  }

  // required double score_occurs_only = 7;
  if (has_score_occurs_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->score_occurs_only(), target);
  }

  // repeated int64 rev_links = 8;
  for (int i = 0; i < this->rev_links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(8, this->rev_links(i), target);
  }

  // required int64 last_hash = 9;
  if (has_last_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->last_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNode)
  return target;
}

int ProtoNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required int64 link = 3;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->link());
    }

    // required int64 len_actual = 4;
    if (has_len_actual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->len_actual());
    }

    // required int64 len_within_document = 5;
    if (has_len_within_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->len_within_document());
    }

    // required int64 docs_occurs_in = 6;
    if (has_docs_occurs_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->docs_occurs_in());
    }

    // required double score_occurs_only = 7;
    if (has_score_occurs_only()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 last_hash = 9;
    if (has_last_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_hash());
    }

  }
  // repeated .ProtoNode.Edge edges = 1;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  // repeated .ProtoNode.Edge rev_edges = 2;
  total_size += 1 * this->rev_edges_size();
  for (int i = 0; i < this->rev_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rev_edges(i));
  }

  // repeated int64 rev_links = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->rev_links_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->rev_links(i));
    }
    total_size += 1 * this->rev_links_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNode::MergeFrom(const ProtoNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  edges_.MergeFrom(from.edges_);
  rev_edges_.MergeFrom(from.rev_edges_);
  rev_links_.MergeFrom(from.rev_links_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_len_actual()) {
      set_len_actual(from.len_actual());
    }
    if (from.has_len_within_document()) {
      set_len_within_document(from.len_within_document());
    }
    if (from.has_docs_occurs_in()) {
      set_docs_occurs_in(from.docs_occurs_in());
    }
    if (from.has_score_occurs_only()) {
      set_score_occurs_only(from.score_occurs_only());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_hash()) {
      set_last_hash(from.last_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNode::CopyFrom(const ProtoNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f8) != 0x000001f8) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->edges())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rev_edges())) return false;
  return true;
}

void ProtoNode::Swap(ProtoNode* other) {
  if (other != this) {
    edges_.Swap(&other->edges_);
    rev_edges_.Swap(&other->rev_edges_);
    rev_links_.Swap(&other->rev_links_);
    std::swap(link_, other->link_);
    std::swap(len_actual_, other->len_actual_);
    std::swap(len_within_document_, other->len_within_document_);
    std::swap(docs_occurs_in_, other->docs_occurs_in_);
    std::swap(score_occurs_only_, other->score_occurs_only_);
    std::swap(last_hash_, other->last_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNode_descriptor_;
  metadata.reflection = ProtoNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAutomaton::kNodesPoolFieldNumber;
const int ProtoAutomaton::kLastNodeFieldNumber;
const int ProtoAutomaton::kLenUpToStopSymbolFieldNumber;
const int ProtoAutomaton::kCurrentCoefFieldNumber;
const int ProtoAutomaton::kIsFreeNodeFieldNumber;
#endif  // !_MSC_VER

ProtoAutomaton::ProtoAutomaton()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAutomaton)
}

void ProtoAutomaton::InitAsDefaultInstance() {
}

ProtoAutomaton::ProtoAutomaton(const ProtoAutomaton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAutomaton)
}

void ProtoAutomaton::SharedCtor() {
  _cached_size_ = 0;
  last_node_ = GOOGLE_LONGLONG(0);
  len_up_to_stop_symbol_ = GOOGLE_LONGLONG(0);
  current_coef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAutomaton::~ProtoAutomaton() {
  // @@protoc_insertion_point(destructor:ProtoAutomaton)
  SharedDtor();
}

void ProtoAutomaton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAutomaton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAutomaton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAutomaton_descriptor_;
}

const ProtoAutomaton& ProtoAutomaton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_automaton_2eproto();
  return *default_instance_;
}

ProtoAutomaton* ProtoAutomaton::default_instance_ = NULL;

ProtoAutomaton* ProtoAutomaton::New() const {
  return new ProtoAutomaton;
}

void ProtoAutomaton::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoAutomaton*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_node_, current_coef_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  nodes_pool_.Clear();
  is_free_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAutomaton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAutomaton)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNode nodes_pool = 1;
      case 1: {
        if (tag == 10) {
         parse_nodes_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes_pool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_nodes_pool;
        if (input->ExpectTag(16)) goto parse_last_node;
        break;
      }

      // required int64 last_node = 2;
      case 2: {
        if (tag == 16) {
         parse_last_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_node_)));
          set_has_last_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len_up_to_stop_symbol;
        break;
      }

      // required int64 len_up_to_stop_symbol = 3;
      case 3: {
        if (tag == 24) {
         parse_len_up_to_stop_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_up_to_stop_symbol_)));
          set_has_len_up_to_stop_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_current_coef;
        break;
      }

      // required double current_coef = 4;
      case 4: {
        if (tag == 33) {
         parse_current_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_coef_)));
          set_has_current_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_free_node;
        break;
      }

      // repeated bool is_free_node = 5;
      case 5: {
        if (tag == 40) {
         parse_is_free_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_is_free_node())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_free_node())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_free_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAutomaton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAutomaton)
  return false;
#undef DO_
}

void ProtoAutomaton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAutomaton)
  // repeated .ProtoNode nodes_pool = 1;
  for (int i = 0; i < this->nodes_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes_pool(i), output);
  }

  // required int64 last_node = 2;
  if (has_last_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_node(), output);
  }

  // required int64 len_up_to_stop_symbol = 3;
  if (has_len_up_to_stop_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->len_up_to_stop_symbol(), output);
  }

  // required double current_coef = 4;
  if (has_current_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->current_coef(), output);
  }

  // repeated bool is_free_node = 5;
  for (int i = 0; i < this->is_free_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->is_free_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAutomaton)
}

::google::protobuf::uint8* ProtoAutomaton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAutomaton)
  // repeated .ProtoNode nodes_pool = 1;
  for (int i = 0; i < this->nodes_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes_pool(i), target);
  }

  // required int64 last_node = 2;
  if (has_last_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_node(), target);
  }

  // required int64 len_up_to_stop_symbol = 3;
  if (has_len_up_to_stop_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->len_up_to_stop_symbol(), target);
  }

  // required double current_coef = 4;
  if (has_current_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->current_coef(), target);
  }

  // repeated bool is_free_node = 5;
  for (int i = 0; i < this->is_free_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->is_free_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAutomaton)
  return target;
}

int ProtoAutomaton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 last_node = 2;
    if (has_last_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_node());
    }

    // required int64 len_up_to_stop_symbol = 3;
    if (has_len_up_to_stop_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->len_up_to_stop_symbol());
    }

    // required double current_coef = 4;
    if (has_current_coef()) {
      total_size += 1 + 8;
    }

  }
  // repeated .ProtoNode nodes_pool = 1;
  total_size += 1 * this->nodes_pool_size();
  for (int i = 0; i < this->nodes_pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes_pool(i));
  }

  // repeated bool is_free_node = 5;
  {
    int data_size = 0;
    data_size = 1 * this->is_free_node_size();
    total_size += 1 * this->is_free_node_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAutomaton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAutomaton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAutomaton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAutomaton::MergeFrom(const ProtoAutomaton& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_pool_.MergeFrom(from.nodes_pool_);
  is_free_node_.MergeFrom(from.is_free_node_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_node()) {
      set_last_node(from.last_node());
    }
    if (from.has_len_up_to_stop_symbol()) {
      set_len_up_to_stop_symbol(from.len_up_to_stop_symbol());
    }
    if (from.has_current_coef()) {
      set_current_coef(from.current_coef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAutomaton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAutomaton::CopyFrom(const ProtoAutomaton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAutomaton::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes_pool())) return false;
  return true;
}

void ProtoAutomaton::Swap(ProtoAutomaton* other) {
  if (other != this) {
    nodes_pool_.Swap(&other->nodes_pool_);
    std::swap(last_node_, other->last_node_);
    std::swap(len_up_to_stop_symbol_, other->len_up_to_stop_symbol_);
    std::swap(current_coef_, other->current_coef_);
    is_free_node_.Swap(&other->is_free_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAutomaton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAutomaton_descriptor_;
  metadata.reflection = ProtoAutomaton_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
